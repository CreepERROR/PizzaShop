<?php

namespace commande;


use Illuminate\Database\Eloquent\Factories\Factory;
use PHPUnit\Framework\Attributes\DataProvider;
use Illuminate\Database\Capsule\Manager as DB;
use pizzashop\shop\domain\service\command\CommandService;
use pizzashop\shop\domain\service\command\interface\ICommandService;

class ServiceCommandeTest extends \PHPUnit\Framework\TestCase {
    private static $commandeIds = [];
    private static $itemIds = [];
    private static $serviceProduits;
    private static $serviceCommande;
    private static $faker;

    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass();
        $dbcom = __DIR__ . '/../../config/commande.db.ini.template';
        $dbcat = __DIR__ . '/../../config/catalog.db.ini.template';
        $db = new DB();
        $db->addConnection(parse_ini_file($dbcom), 'command');
        $db->addConnection(parse_ini_file($dbcat), 'catalog');
        $db->setAsGlobal();
        $db->bootEloquent();

//        self::$serviceProduits = new \pizzashop\shop\domain\service\catalog\CatalogService();
//        self::$serviceCommande = new \pizzashop\shop\domain\service\command\CommandService(self::$serviceProduits);
//        self::$faker = Factory::create('fr_FR');
//        self::fill();

    }

    public static function tearDownAfterClass(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        self::cleanDB();
    }


//    private static function cleanDB(){
//        foreach (self::$commandeIds as $id){
//            Commande::find($id)->delete();
//        }
//        foreach (self::$itemIds as $id){
//            Item::find($id)->delete();
//        }
//    }
    private static function fill() {

   	 	// TODO : créer une command dans la base pour tester l'accès à une command
    }


    public function testAccederCommande(){
        //$id = self::$commandeIds[0];
        $commandeService = new CommandService();
        $commande = $commandeService->readCommand('112e7ee1-3e8d-37d6-89cf-be3318ad6368');
        $this->assertEquals('112e7ee1-3e8d-37d6-89cf-be3318ad6368', $commande->id);
    }

    public function testLogs(){
        // TODO : vérifier que le fichier de log contient bien les logs de la command créée
        $commandeService = new CommandService();

    }

}