<?php

namespace commande;

use Faker\Factory;
use PHPUnit\Framework\Attributes\DataProvider;
use pizzashop\shop\domain\entities\commande\Commande;
use pizzashop\shop\domain\entities\commande\Item;
use Illuminate\Database\Capsule\Manager as DB;
use pizzashop\shop\domain\service\Interface\ICommandService;

class ServiceCommandeTest extends \PHPUnit\Framework\TestCase {

    private static $commandeIds = [];
    private static $itemIds = [];
    private static $serviceProduits;
    private static $serviceCommande;
    private static $faker;

//    public static function setUpBeforeClass(): void
//    {
//        parent::setUpBeforeClass();
//        $dbcom = __DIR__ . '/../../config/command.db.test.ini';
//        $dbcat = __DIR__ . '/../../config/catalog.db.ini';
//        $db = new DB();
//        $db->addConnection(parse_ini_file($dbcom), 'command');
//        $db->addConnection(parse_ini_file($dbcat), 'catalog');
//        $db->setAsGlobal();
//        $db->bootEloquent();
//
//        self::$serviceProduits = new \pizzashop\shop\domain\service\catalogue\ServiceCatalogue();
//        self::$serviceCommande = new \pizzashop\shop\domain\service\command\ServiceCommande(self::$serviceProduits);
//        self::$faker = Factory::create('fr_FR');
//        self::fill();
//
//    }

    public static function tearDownAfterClass(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        self::cleanDB();
    }


    private static function cleanDB(){
        foreach (self::$commandeIds as $id){
            Commande::find($id)->delete();
        }
        foreach (self::$itemIds as $id){
            Item::find($id)->delete();
        }
    }
    private static function fill() {

   	 	// TODO : créer une command dans la base pour tester l'accès à une command
    }


    public function testAccederCommande(){
        //$id = self::$commandeIds[0];
        ICommandService::getCommandeById('1');
        $commande = $commandeService->getCommandeById('1');
        if($commande == null){
            $this->fail('La command n\'a pas été trouvée');
        }

    }

    public function testLogs(){
        // TODO : vérifier que le fichier de log contient bien les logs de la command créée
        $commandeService = new CommandService();

    }

}